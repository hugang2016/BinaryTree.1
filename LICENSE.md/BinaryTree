#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
#include<stack>
#include<queue>
using namespace std;
typedef struct BinaryTreeNode
{
	int _data;
	BinaryTreeNode* _leftchild;
	BinaryTreeNode* _rightchild;
}BinaryTreeNode,*pBinaryTreeNode;

typedef struct BinaryTree
{
	BinaryTreeNode *_root;
}BinaryTree,*pBinaryTree;

BinaryTreeNode* BuyTreeNode(int data)
{
	BinaryTreeNode* pnewNode=(BinaryTreeNode*)malloc(sizeof(BinaryTreeNode));
	if(pnewNode==NULL)
	{
		printf("memory is out\n");
		exit(EXIT_FAILURE);
	}
	pnewNode->_data=data;
	pnewNode->_leftchild=NULL;
	pnewNode->_rightchild=NULL;
	return pnewNode;
}

void CreatBinaryTreeByPeorderTraversal(pBinaryTree pbt,const int arr[],const int size,const int k)
{
	BinaryTreeNode* pnewNode=NULL;
	BinaryTreeNode* pcurNode=NULL;
	stack<pBinaryTreeNode> mst;
	int sz=(int)size;
	int i=0;
	assert(arr&&arr[0]!=k);//前序遍历第一个元素不能为k
	pnewNode=BuyTreeNode(arr[i++]);

	pbt->_root=pnewNode;
	mst.push(pnewNode);
	pcurNode=pbt->_root;
	while(sz--)
	{
		if(arr[i]!=k)
		{
			pnewNode=BuyTreeNode(arr[i]);
			pcurNode->_leftchild=pnewNode;
			pcurNode=pnewNode;
		}

	}
}
BinaryTreeNode* RCreatBinaryTreeByPeorderTraversal(const int arr[],const int size,int& index,const int k)
{
	BinaryTreeNode* pnewNode=NULL;
	if(arr[index]!=k&&index<size)
	{
		pnewNode=BuyTreeNode(arr[index]);
		
		pnewNode->_leftchild=RCreatBinaryTreeByPeorderTraversal(arr,size,++index,k);
		pnewNode->_rightchild=RCreatBinaryTreeByPeorderTraversal(arr,size,++index,k);
	}
	return pnewNode;
}
void PreOrder(BinaryTreeNode* root)
{
	if(root==NULL)
		return;
	printf("%d\n",root->_data);
	PreOrder(root->_leftchild);
	PreOrder(root->_rightchild);
}
void InOrder(BinaryTreeNode* root)
{
	if(root==NULL)
		return ;
	InOrder(root->_leftchild);
	printf("%d\n",root->_data);
	InOrder(root->_rightchild);

}
void PostOrder(BinaryTreeNode* root)
{
	if(root==NULL)
		return ;
	PostOrder(root->_leftchild);
	if(root->_rightchild)
	
		PostOrder(root->_rightchild);	
	}

	printf("%d\n",root->_data);
}
void LevelOrder_ByStack(BinaryTreeNode* root)
{
	stack<BinaryTreeNode*> stack_1;
	stack<BinaryTreeNode*> stack_2;
	BinaryTreeNode* pcurNode=NULL;	stack_1.push(root);
	if(root!=NULL)
	{
		while(!stack_1.empty() || !stack_2.empty())
		{
			while(!stack_1.empty())
			{
				printf("%d\n",stack_1.top()->_data);
				stack_2.push(stack_1.top());
				stack_1.pop();
			}
			while(!stack_2.empty())
			{
				pcurNode=stack_2.top();
				if(pcurNode->_rightchild!=NULL)
					stack_1.push(pcurNode->_rightchild);
				if(pcurNode->_leftchild!=NULL)
					stack_1.push(pcurNode->_leftchild);
				
				stack_2.pop();
			}
		}
	}

}
void LevelOrder_ByQueue(BinaryTreeNode* root)
{
	BinaryTreeNode* pcurNode=NULL;
	queue<BinaryTreeNode*> q;
	assert(root);
	q.push(root);
	while(!q.empty())
	{
		pcurNode=q.front();
		printf("%d\n",pcurNode->_data);
		if(pcurNode->_leftchild)
		{
			q.push(pcurNode->_leftchild);
		}
		if(pcurNode->_rightchild)
		{
			q.push(pcurNode->_rightchild);
		}
		q.pop();
	}
}
int Depth(BinaryTreeNode* root,int &depth)
{
	if(root==NULL)
		return 0;
	int leftdepth=Depth(root->_leftchild,depth);
	int rightdepth=Depth(root->_rightchild,depth);
	return leftdepth>rightdepth?leftdepth+1:rightdepth+1;
}
int Size(BinaryTreeNode* root)
{
	if(root==NULL)
		return 0;
	return Size(root->_leftchild)+Size(root->_rightchild)+1;
}
BinaryTreeNode* FindNode(BinaryTreeNode* root,const int& key)
{
	if(root==NULL)
		return NULL;
	if(root->_data==key)
		return root;
	BinaryTreeNode* key_Node=FindNode(root->_leftchild,key);
	if(key_Node==NULL)
		key_Node=FindNode(root->_rightchild,key);
	return key_Node;


}

#include"BinaryTree.h"

void test_CreatBinaryTree()
{
	pBinaryTree bt;
	bt=(pBinaryTree)malloc(sizeof(BinaryTree));
	int arr[]={1,2,4,'#','#',5,7,'#','#',8,'#','#',3,'#',6};
	int size=sizeof(arr)/sizeof(int);
	int index=0;
	bt->_root=RCreatBinaryTreeByPeorderTraversal(arr,size,index,'#');
	/*printf("preorder: \n");*/
	/*PreOrder(bt->_root);
	printf("\n");
	printf("inorder: \n");
	InOrder(bt->_root);
	printf("\n");
	printf("postorder:\n");
	PostOrder(bt->_root);
	printf("\n");*/
	printf("levelorder:\n");
	LevelOrder_ByStack(bt->_root);
	printf("\n");
	LevelOrder_ByQueue(bt->_root);
	int depth=0;
	depth=Depth(bt->_root,depth);
	printf("depth is %d\n",depth);
	int sz=Size(bt->_root);
	printf("size is %d\n",sz);
	int key=1;
	for(;key<9;key++)
	{
		BinaryTreeNode* key_Node=FindNode(bt->_root,key);
		printf("key is %d keyNode is %d\n",key,key_Node->_data);
	}
}
int main()
{
	test_CreatBinaryTree();
	getchar();
	system("pause");
	return 0;
}
